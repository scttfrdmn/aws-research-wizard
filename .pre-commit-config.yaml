# Pre-commit hooks for AWS Research Wizard
# See https://pre-commit.com for more information

default_stages: [pre-commit]
fail_fast: false

repos:
  # Standard pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--unsafe]
      - id: check-toml
      - id: check-json
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-docstring-first
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: check-added-large-files
        args: [--maxkb=10000]
      - id: debug-statements
      - id: mixed-line-ending
        args: [--fix=lf]

  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ["-c", "pyproject.toml"]
        additional_dependencies: ["bandit[toml]"]
        exclude: ^tests/

  # Code formatting
  - repo: https://github.com/psf/black
    rev: 23.7.0
    hooks:
      - id: black
        language_version: python3
        args: [--config=pyproject.toml]

  # Import sorting
  - repo: https://github.com/PyCQA/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--settings-path=pyproject.toml]

  # Linting
  - repo: https://github.com/PyCQA/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify
          - flake8-pytest-style
        args:
          - --max-line-length=100
          - --max-complexity=12
          - --select=E,W,F,B,C,D
          - --ignore=E203,E501,W503,D100,D104,D107,D213,D203
          - --per-file-ignores=__init__.py:F401,tests/*:D

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.5.1
    hooks:
      - id: mypy
        additional_dependencies:
          - types-PyYAML
          - types-requests
          - boto3-stubs[essential]
        args: [--config-file=pyproject.toml]
        exclude: ^tests/

  # Advanced Python linting
  - repo: https://github.com/PyCQA/pylint
    rev: v2.17.5
    hooks:
      - id: pylint
        args:
          - --rcfile=pyproject.toml
          - --disable=C0114,C0115,C0116  # Allow missing docstrings in tests
        files: ^(?!tests/).*\.py$

  # Docstring formatting
  - repo: https://github.com/PyCQA/docformatter
    rev: v1.7.7
    hooks:
      - id: docformatter
        args:
          - --in-place
          - --wrap-summaries=100
          - --wrap-descriptions=100
          - --make-summary-multi-line

  # Check for common Python anti-patterns
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.10.1
    hooks:
      - id: pyupgrade
        args: [--py39-plus]

  # Remove unused imports
  - repo: https://github.com/PyCQA/autoflake
    rev: v2.2.0
    hooks:
      - id: autoflake
        args:
          - --in-place
          - --remove-all-unused-imports
          - --remove-unused-variables
          - --remove-duplicate-keys
          - --ignore-init-module-imports

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.2
    hooks:
      - id: prettier
        types: [yaml]
        exclude: \.pre-commit-config\.yaml$

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.5
    hooks:
      - id: shellcheck

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # Local hooks for custom checks
  - repo: local
    hooks:
      # Check test coverage requirement
      - id: test-coverage
        name: Test Coverage Check
        entry: python
        language: system
        args:
          - -c
          - |
            import subprocess
            import sys
            try:
                result = subprocess.run(['python', '-m', 'pytest', '--cov=.', '--cov-fail-under=85', '--tb=no', '-q'], 
                                      capture_output=True, text=True, timeout=300)
                if result.returncode != 0:
                    print("❌ Test coverage below 85% threshold!")
                    print(result.stdout)
                    print(result.stderr)
                    sys.exit(1)
                else:
                    print("✅ Test coverage meets 85% threshold")
            except subprocess.TimeoutExpired:
                print("❌ Tests timed out after 5 minutes")
                sys.exit(1)
            except Exception as e:
                print(f"❌ Error running tests: {e}")
                sys.exit(1)
        pass_filenames: false
        stages: [pre-push]

      # Check code comment density
      - id: comment-density
        name: Code Comment Density Check
        entry: python
        language: system
        args:
          - -c
          - |
            import os
            import re
            import sys
            
            def check_comment_density(file_path, min_density=0.15):
                """Check if Python file has adequate comment density."""
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                except:
                    return True  # Skip files that can't be read
                
                total_lines = len(lines)
                if total_lines == 0:
                    return True
                
                comment_lines = 0
                docstring_lines = 0
                in_docstring = False
                docstring_quote = None
                
                for line in lines:
                    stripped = line.strip()
                    
                    # Skip empty lines
                    if not stripped:
                        continue
                    
                    # Check for docstring start/end
                    if not in_docstring:
                        if stripped.startswith('"""') or stripped.startswith("'''"):
                            in_docstring = True
                            docstring_quote = stripped[:3]
                            docstring_lines += 1
                            if stripped.count(docstring_quote) >= 2:
                                in_docstring = False
                            continue
                    else:
                        docstring_lines += 1
                        if docstring_quote in stripped:
                            in_docstring = False
                        continue
                    
                    # Check for regular comments
                    if stripped.startswith('#'):
                        comment_lines += 1
                    elif '#' in stripped and not any(q in stripped for q in ['"', "'"]):
                        comment_lines += 1
                
                documented_lines = comment_lines + docstring_lines
                density = documented_lines / total_lines
                
                return density >= min_density, density, documented_lines, total_lines
            
            failed_files = []
            
            for root, dirs, files in os.walk('.'):
                # Skip certain directories
                dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['venv', '__pycache__', 'htmlcov']]
                
                for file in files:
                    if file.endswith('.py') and not file.startswith('test_'):
                        file_path = os.path.join(root, file)
                        
                        # Skip __init__.py files and certain generated files
                        if file == '__init__.py' or 'generated' in file_path:
                            continue
                        
                        result = check_comment_density(file_path)
                        if isinstance(result, tuple):
                            passed, density, doc_lines, total_lines = result
                            if not passed:
                                failed_files.append((file_path, density, doc_lines, total_lines))
            
            if failed_files:
                print("❌ Files with insufficient comment density (minimum 15%):")
                for file_path, density, doc_lines, total_lines in failed_files:
                    print(f"  {file_path}: {density:.1%} ({doc_lines}/{total_lines} lines)")
                print("\nAdd more comments or docstrings to improve documentation.")
                sys.exit(1)
            else:
                print("✅ All files meet comment density requirements")
        files: \.py$
        exclude: ^tests/|__init__.py$

      # Check for TODO/FIXME comments
      - id: check-todos
        name: Check TODO/FIXME Comments
        entry: python
        language: system
        args:
          - -c
          - |
            import os
            import re
            import sys
            
            todo_pattern = re.compile(r'#\s*(TODO|FIXME|XXX|HACK)', re.IGNORECASE)
            found_todos = []
            
            for root, dirs, files in os.walk('.'):
                dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['venv', '__pycache__']]
                for file in files:
                    if file.endswith('.py'):
                        file_path = os.path.join(root, file)
                        try:
                            with open(file_path, 'r', encoding='utf-8') as f:
                                for line_num, line in enumerate(f, 1):
                                    if todo_pattern.search(line):
                                        found_todos.append((file_path, line_num, line.strip()))
                        except:
                            continue
            
            if found_todos:
                print("⚠️  Found TODO/FIXME comments (review before commit):")
                for file_path, line_num, line in found_todos:
                    print(f"  {file_path}:{line_num}: {line}")
                # Don't fail, just warn
            else:
                print("✅ No TODO/FIXME comments found")
        pass_filenames: false

# Configuration for specific tools
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [test-coverage, comment-density]  # Skip expensive checks on CI
  submodules: false