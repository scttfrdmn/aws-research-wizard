[tox]
envlist = py39,py310,py311,py312,lint,type-check,security,docs
isolated_build = true
minversion = 4.0

[testenv]
description = Run unit tests with coverage
deps = 
    -r requirements-dev.txt
commands = 
    python -m pytest {posargs} --cov=. --cov-report=term-missing --cov-report=xml --cov-fail-under=85
setenv =
    PYTHONPATH = {toxinidir}
    AWS_DEFAULT_REGION = us-east-1
    AWS_ACCESS_KEY_ID = testing
    AWS_SECRET_ACCESS_KEY = testing
    AWS_SECURITY_TOKEN = testing
    AWS_SESSION_TOKEN = testing
passenv = 
    CI
    GITHUB_*
    CODECOV_*

[testenv:lint]
description = Run code linting and formatting checks
deps = 
    black>=23.7.0
    isort>=5.12.0
    flake8>=6.0.0
    flake8-docstrings
    flake8-bugbear
    flake8-comprehensions
    flake8-simplify
    flake8-pytest-style
    autoflake>=2.2.0
    pyupgrade>=3.10.1
commands = 
    black --check --diff .
    isort --check-only --diff .
    flake8 .
    autoflake --check --recursive .
    pyupgrade --py39-plus $(find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" -not -path "./build/*")

[testenv:format]
description = Auto-format code
deps = 
    black>=23.7.0
    isort>=5.12.0
    autoflake>=2.2.0
    pyupgrade>=3.10.1
commands = 
    autoflake --in-place --recursive --remove-all-unused-imports --remove-unused-variables .
    pyupgrade --py39-plus $(find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" -not -path "./build/*")
    black .
    isort .

[testenv:type-check]
description = Run static type checking
deps = 
    mypy>=1.5.0
    types-PyYAML
    types-requests
    boto3-stubs[essential]
commands = 
    mypy .

[testenv:security]
description = Run security checks
deps = 
    bandit>=1.7.5
    safety>=2.3.0
commands = 
    bandit -r . -f json -o bandit-report.json
    bandit -r . -ll
    safety check --json --output safety-report.json
    safety check

[testenv:docs]
description = Build documentation
deps = 
    sphinx>=7.1.0
    sphinx-rtd-theme>=1.3.0
    sphinx-autodoc-typehints>=1.24.0
    myst-parser>=2.0.0
    sphinx-click>=5.0.0
commands = 
    sphinx-build -W -b html docs docs/_build/html
    sphinx-build -W -b linkcheck docs docs/_build/linkcheck

[testenv:coverage]
description = Generate coverage report
deps = 
    -r requirements-dev.txt
commands = 
    python -m pytest --cov=. --cov-report=html --cov-report=xml --cov-report=term
    coverage report --show-missing --fail-under=85

[testenv:integration]
description = Run integration tests (requires AWS credentials)
deps = 
    -r requirements-dev.txt
commands = 
    python -m pytest tests/integration/ -v --tb=short
passenv = 
    AWS_*
    {[testenv]passenv}

[testenv:performance]
description = Run performance benchmarks
deps = 
    -r requirements-dev.txt
    pytest-benchmark>=4.0.0
commands = 
    python -m pytest tests/performance/ --benchmark-only --benchmark-json=benchmark-results.json

[testenv:clean]
description = Clean up build artifacts and cache
deps = 
commands = 
    python -c "import shutil; import os; [shutil.rmtree(d, ignore_errors=True) for d in ['.tox', '.pytest_cache', '__pycache__', 'build', 'dist', '.coverage', 'htmlcov', '.mypy_cache']]"
    python -c "import os; [os.remove(f) for f in ['coverage.xml', 'bandit-report.json', 'safety-report.json', 'benchmark-results.json'] if os.path.exists(f)]"

[flake8]
max-line-length = 100
max-complexity = 12
select = E,W,F,B,C,D
ignore = E203,E501,W503,D100,D104,D107,D213,D203
per-file-ignores = 
    __init__.py:F401
    tests/*:D
    *_test.py:D
    test_*.py:D
exclude = 
    .git,
    __pycache__,
    .tox,
    .venv,
    venv,
    build,
    dist,
    *.egg-info

[coverage:run]
source = .
omit = 
    tests/*
    .tox/*
    .venv/*
    venv/*
    setup.py
    conftest.py
    */site-packages/*
branch = true

[coverage:report]
exclude_lines = 
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
show_missing = true
precision = 2
fail_under = 85

[coverage:html]
directory = htmlcov
title = AWS Research Wizard Coverage Report

[coverage:xml]
output = coverage.xml