name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache-dependency-path: go/go.sum

      - name: Download dependencies
        working-directory: ./go
        run: go mod download

      - name: Verify dependencies
        working-directory: ./go
        run: go mod verify

      - name: Run tests
        working-directory: ./go
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./go/coverage.out
          directory: ./go
          flags: unittests
          name: codecov-go

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache-dependency-path: go/go.sum

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: ./go
          args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache-dependency-path: go/go.sum

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec.sarif ./...'
          working-directory: './go'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: go/gosec.sarif

  build:
    name: Build Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache-dependency-path: go/go.sum

      - name: Build binary (Unix)
        if: matrix.os != 'windows-latest'
        working-directory: ./go
        run: |
          make build
          ./build/aws-research-wizard version

      - name: Build binary (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: ./go
        run: |
          go build -o build/aws-research-wizard.exe ./cmd
          ./build/aws-research-wizard.exe version

      - name: Test installation paths
        if: matrix.os == 'ubuntu-latest'
        working-directory: ./go
        run: |
          # Test that binary works from different locations
          mkdir -p test-install
          cp build/aws-research-wizard test-install/
          cd test-install
          ./aws-research-wizard --help

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache-dependency-path: go/go.sum

      - name: Build binary
        working-directory: ./go
        run: make build

      - name: Test help commands
        working-directory: ./go
        run: |
          # Test all help commands work
          ./build/aws-research-wizard --help
          ./build/aws-research-wizard config --help
          ./build/aws-research-wizard deploy --help
          ./build/aws-research-wizard monitor --help
          ./build/aws-research-wizard version

      - name: Test config subcommands
        working-directory: ./go
        run: |
          # Test config subcommands (these should work without AWS credentials)
          ./build/aws-research-wizard config list || echo "Config list requires domain files"
          ./build/aws-research-wizard config search test || echo "Config search requires domain files"

      - name: Test deploy subcommands
        working-directory: ./go
        run: |
          # Test deploy subcommands that don't require AWS
          ./build/aws-research-wizard deploy validate || echo "Deploy validate requires AWS credentials"

  dependencies:
    name: Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache-dependency-path: go/go.sum

      - name: Check for vulnerabilities
        working-directory: ./go
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Check for outdated dependencies
        working-directory: ./go
        run: |
          go list -u -m all

      - name: Verify go.mod is tidy
        working-directory: ./go
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

  size-check:
    name: Binary Size Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache-dependency-path: go/go.sum

      - name: Build optimized binary
        working-directory: ./go
        run: |
          # Build with size optimization
          go build -ldflags "-s -w" -o build/aws-research-wizard-optimized ./cmd

          # Check sizes
          echo "## Binary Sizes" >> size-report.md
          echo "| Binary | Size |" >> size-report.md
          echo "|--------|------|" >> size-report.md

          if [ -f build/aws-research-wizard ]; then
            SIZE=$(du -h build/aws-research-wizard | cut -f1)
            echo "| Standard | $SIZE |" >> size-report.md
          fi

          SIZE_OPT=$(du -h build/aws-research-wizard-optimized | cut -f1)
          echo "| Optimized | $SIZE_OPT |" >> size-report.md

          echo "### Size Report" >> $GITHUB_STEP_SUMMARY
          cat size-report.md >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const sizeReport = fs.readFileSync('go/size-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üìä Binary Size Report\n\n${sizeReport}`
            });

  status-check:
    name: Status Check
    if: always()
    runs-on: ubuntu-latest
    needs: [test, lint, security, build, integration, dependencies, size-check]

    steps:
      - name: Check all jobs status
        run: |
          echo "## CI Status Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Test | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration | ${{ needs.integration.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.dependencies.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Size Check | ${{ needs.size-check.result }} |" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.test.result }}" == "failure" || "${{ needs.lint.result }}" == "failure" || "${{ needs.security.result }}" == "failure" || "${{ needs.build.result }}" == "failure" ]]; then
            echo "‚ùå CI Failed - One or more critical jobs failed"
            exit 1
          else
            echo "‚úÖ CI Passed - All jobs completed successfully"
          fi
