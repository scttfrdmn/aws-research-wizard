name: Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [created]

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            output: aws-research-wizard-linux-amd64
          - goos: linux
            goarch: arm64
            output: aws-research-wizard-linux-arm64
          - goos: darwin
            goarch: amd64
            output: aws-research-wizard-darwin-amd64
          - goos: darwin
            goarch: arm64
            output: aws-research-wizard-darwin-arm64
          - goos: windows
            goarch: amd64
            output: aws-research-wizard-windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache-dependency-path: go/go.sum

      - name: Get version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(git describe --tags --always --dirty)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_time=$(date -u '+%Y-%m-%d_%H:%M:%S')" >> $GITHUB_OUTPUT
          echo "git_commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Build binary
        working-directory: ./go
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build \
            -ldflags "-s -w -X main.version=${{ steps.version.outputs.version }} -X main.buildTime=${{ steps.version.outputs.build_time }} -X main.gitCommit=${{ steps.version.outputs.git_commit }}" \
            -o ../build/${{ matrix.output }} \
            ./cmd

      - name: Calculate checksum
        run: |
          cd build
          sha256sum ${{ matrix.output }} > ${{ matrix.output }}.sha256

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: |
            build/${{ matrix.output }}
            build/${{ matrix.output }}.sha256

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: ./release-assets

      - name: Generate checksums file
        run: |
          cd release-assets
          cat *.sha256 > checksums.txt
          echo "## Checksums" >> ../release-notes.md
          echo '```' >> ../release-notes.md
          cat checksums.txt >> ../release-notes.md
          echo '```' >> ../release-notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-assets/aws-research-wizard-*
            release-assets/checksums.txt
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build Docker Image
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Linux AMD64 binary
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: ./docker-build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Create Dockerfile
        run: |
          cat > docker-build/Dockerfile << 'EOF'
          FROM alpine:latest
          RUN apk add --no-cache ca-certificates git
          COPY aws-research-wizard-linux-amd64 /usr/local/bin/aws-research-wizard
          RUN chmod +x /usr/local/bin/aws-research-wizard
          USER 1000:1000
          ENTRYPOINT ["aws-research-wizard"]
          CMD ["--help"]
          EOF

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./docker-build
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  homebrew:
    name: Update Homebrew Formula
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')

    steps:
      - name: Update Homebrew formula
        uses: dawidd6/action-homebrew-bump-formula@v5
        with:
          token: ${{ secrets.HOMEBREW_GITHUB_TOKEN }}
          formula: aws-research-wizard
          tap: aws-research-wizard/homebrew-tap
          tag: ${{ github.ref_name }}

  notify:
    name: Notify Success
    needs: [release, docker, homebrew]
    runs-on: ubuntu-latest
    if: always() && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Notify release completion
        run: |
          echo "ðŸŽ‰ Release ${{ github.ref_name }} completed successfully!"
          echo "âœ… Binaries built for all platforms"
          echo "âœ… GitHub release created"
          echo "âœ… Docker image published"
          echo "âœ… Homebrew formula updated"
          echo ""
          echo "ðŸ“¦ Release assets available at:"
          echo "https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
